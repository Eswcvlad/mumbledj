// Code generated by go-bindata.
// sources:
// config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x7b\x6f\x1b\xb7\xb2\xff\xdf\x9f\x82\x55\x6e\x70\x13\xc0\x55\xe2\xdc\xbe\x60\xe4\xa6\x48\x9d\x9c\x53\x1f\xc4\x4d\x91\xb8\x05\xfa\xd7\x82\xd2\x72\x25\xd6\xbb\xe4\x9e\xe5\xae\x64\xf5\xd3\x9f\x79\x90\xdc\xa7\x2c\xc9\x29\x70\x7c\x2f\x7a\x22\xee\x70\x66\x38\x2f\xfe\x66\x76\x9f\x88\x9b\xa6\x58\xe4\xea\xdd\xbf\xce\x9e\x88\x9f\x76\xe2\x46\xd6\xf5\x5a\xab\x46\xfc\xb3\xd2\x6a\xa5\x2a\x58\xbd\xb2\xe5\xae\xd2\xab\x75\x2d\x9e\x2d\x9f\x8b\x57\x2f\x2f\xbe\x1b\x51\x89\x67\x37\xd7\xb7\xe2\x83\x5e\x2a\xe3\xd4\x73\xd8\xb3\xb4\x26\xd3\xab\xf9\x4e\x16\xf9\xd9\x99\x2c\x75\x72\xa7\x76\xee\xf2\xec\x4c\xc0\xdf\x13\xf1\x87\x6d\x6e\x9b\x85\x12\x6f\x7f\xbd\x16\xf0\x60\x4e\xcb\x3b\xdb\xd4\xb0\x78\x29\x66\xb3\x40\xf7\xd9\x36\x26\xbd\xca\x6d\x93\xf6\x49\x9f\x88\x5f\x3e\xde\xbe\xbf\x14\xb7\xeb\xc8\x43\x68\x87\x1c\x2a\xb1\xcc\xb5\x32\xb5\xb8\x7e\xc7\xa4\x0e\x59\x2c\x91\x05\x33\x3e\x4b\x55\x26\x9b\xbc\x6e\x95\x79\xc7\x0b\xa0\x72\x51\xe0\xce\xda\x0a\x50\x4d\x96\x25\x30\x4a\xe9\x97\xad\xfb\x62\xaf\x33\x14\x25\x52\x2b\x8c\xad\xc5\x56\xc2\x26\x19\xb7\x2f\x76\xc2\x8b\x38\x17\x4e\x11\x3b\x55\x94\xf5\x4e\xb8\xba\xd2\x66\x25\x9e\xcd\x66\xcf\x99\x9d\xdf\x01\x7a\xfd\xac\xf2\xdc\x7e\x25\xae\x85\x2c\x80\x13\xca\x13\xb7\xbb\x52\x89\xaf\xd6\x2a\x2f\x45\x66\x2b\x58\xcd\xb5\xab\x85\xcd\x68\x97\x34\xa9\x9b\xcf\x46\x07\x58\x4b\x63\x54\x4e\xf4\x35\x58\x06\xf8\x90\x74\x53\x83\x83\x9a\xd2\x1a\xf4\x8a\x51\xcb\x5a\x5b\x33\x79\xa0\xad\x76\xeb\xe1\x6e\xbf\x05\xff\x89\xab\x95\xb5\x51\xd0\xc1\xf3\x31\x59\xd7\xa1\x57\xac\x3c\x6e\x6a\x9c\xc2\xff\x29\x73\xb9\x13\xb2\x49\xb5\x15\x99\xce\x95\x9b\x93\x53\xeb\xad\x15\xae\x29\x4b\x5b\xd5\xe0\x83\xe5\xda\x42\x64\x39\x21\x2b\x25\x66\x59\x56\x94\x6a\x35\x13\xc8\x66\x26\x37\xa0\xdf\x66\xc6\xf2\x90\x95\xaa\x12\x6f\xa0\xcb\x48\x0a\x4e\xff\x77\xa3\x1a\x15\x3d\xfe\x49\x82\x09\xe0\x38\xb2\x16\x45\x03\x56\x05\x77\x17\x70\x12\x38\xb8\xba\x5f\x2a\x95\xb2\xdb\xe1\x38\x2b\x0c\x6d\x09\xff\x92\xcb\x3b\xe1\xee\x74\xc9\x82\xe8\x77\x82\xbf\x93\x0a\x59\x5d\x8a\x97\xf3\x6f\x1f\xcb\x1c\xb5\x26\xdf\xb6\xfc\xc3\xd2\x3e\x11\x37\xf2\x5e\x17\x4d\xe1\xf5\x4a\x1b\xa2\x30\x42\x1b\x70\x08\xd8\x03\x62\x43\x7c\x66\xcf\xbc\x24\x77\x36\xa6\x52\xe8\x9d\x25\x1a\x33\x90\xb3\xa8\x42\xde\x27\x7c\x9c\xb0\x0e\x92\x26\xe5\x38\x51\x82\xbe\x41\xb5\x87\x24\x04\x1a\x37\x10\xe1\x12\xe0\x90\x84\xa7\x97\xe2\xdb\x28\xe8\xda\x09\xb7\x6e\xb2\x2c\xc7\x00\x52\x46\x42\x3d\x4a\xc5\x76\xad\x4c\x8c\x44\x57\xcb\xaa\x76\x3f\x12\xbd\x6c\x6a\x5b\x80\xae\xcb\x84\x37\xa9\x04\xb5\xce\x64\xee\x54\x60\xf8\xd6\x18\xc8\xfb\xa5\xf2\x26\xd2\x06\x94\x2c\xd8\x4a\xe0\x17\x62\xaa\x56\xda\x18\x94\x07\x39\xc5\xf1\x87\x9a\x2d\x80\xdc\x4b\xf1\x2c\x12\xa3\xb6\x5e\xff\x4b\x60\xd7\x80\x8c\xb3\x36\x8f\x62\x4c\xbd\x4d\x53\x30\x81\x63\x65\xd7\xb6\xc9\x53\x90\x54\x63\x66\xf4\xb3\x88\x6d\x22\x99\x1a\x62\xf4\xe2\xd5\xf7\xf3\x97\xf0\x7f\x17\x31\x47\x7e\x85\xa0\x3f\x92\x0d\xe6\x07\xf0\xf8\xee\x9b\xef\xff\xef\x87\x76\xbf\x74\x6e\x6b\xab\x94\x1c\x13\x34\x85\x73\xc2\x7e\xa7\xaa\x8d\xaa\x46\xb9\x6f\xe0\xec\x7e\xd3\xa1\x9c\x0e\x74\xdd\xa4\xfe\x0d\xd8\x1a\x59\x28\x12\x18\x6e\x13\x26\x6f\xfc\x23\x20\x0f\x0f\xe2\xb6\x7f\x40\xba\x97\xb2\x5e\xfb\x62\x00\xb1\x75\xf1\x8a\x6a\x00\x17\xbc\x06\xbc\x64\xc0\xc9\x92\x94\x97\x90\xfd\xa2\x02\x9f\x39\x28\x66\x10\x1c\xb8\x61\xf2\x1c\x81\x07\x5c\x07\x86\xb2\xed\xd0\x89\x90\x53\x02\xdb\x7a\xf7\x0e\x5b\x3e\x04\x5f\xf0\x80\xc4\x1c\x83\x14\x6b\xa0\x0e\xb5\x21\xf0\x63\x8c\xb9\xa9\xa7\x70\x4b\x40\xe5\xc2\x7b\x02\x2c\xaf\xb3\x1d\x31\x5d\xaa\xaa\xd6\x19\x9e\x4d\x61\xf8\xe1\x12\xbb\x06\x8f\xee\xd9\x01\x0b\x87\xa7\x35\xcb\xdd\x5c\x5c\xd7\x78\xa0\x05\xe4\x18\x9e\x24\x57\x72\x03\xa1\xbd\x86\x25\x6b\xce\xc5\xa2\xa9\x45\xaa\x1d\x66\x8d\xd0\x40\xc8\xc5\x1c\x8b\xe5\x5a\x6e\xe0\xb0\x9e\xa1\x76\xae\x01\x55\xfa\x11\x21\x83\x60\x34\x39\xec\xa8\x1a\x4e\x8a\x02\x2e\x14\x5d\x22\x43\x03\xa9\x67\xb0\xfa\x82\xa2\x7d\xe7\x86\xd3\x0e\x72\xaf\xeb\xd7\xee\x41\xd1\x2d\x53\x2e\x1b\xd2\x1c\xef\x3a\xdc\xd9\x75\xdb\x3e\xc9\x08\x0f\xf6\x49\xf7\xd0\xe1\x38\x81\x40\xdc\x95\xf7\x76\xb9\xc4\x94\xaf\xed\x1d\xc0\x1e\xdc\xa6\x8d\xae\xb5\xcc\xf5\x5f\x2a\xc6\xce\x56\xd7\x6b\x64\x5b\x4a\x28\xaf\x10\xb8\x00\x0f\xe8\x82\x72\x53\xca\xc8\x1e\x43\xf4\xc7\x71\x7a\xf1\xbe\x84\xf7\x3d\x14\xc8\xa1\x72\xca\x3c\xdf\x75\x0b\x4b\xa5\xea\x6a\xd7\x8d\xda\x6e\x68\xc8\x0c\x01\x04\x44\x58\x1b\x3a\x1c\xf3\xb4\x2b\xf1\xf5\x3a\x14\x47\x16\xfc\xb3\xdd\x42\xe1\x37\x10\xee\xba\x50\x2e\x94\xb2\x61\x42\x91\xe4\x01\xc2\x60\xa1\x5d\x01\x9e\x1a\x0e\x76\xf1\x72\xc4\xdf\xdf\x78\x43\x09\x5b\x89\x99\x60\xbe\x5e\xa8\x7a\xab\x54\x17\xf9\xf8\xb3\x06\xa6\x5d\x41\x1a\x91\xd2\x46\x02\x62\xf9\x16\x8b\xbc\x5c\xae\x5b\xcc\x70\x85\xbf\x00\x4d\x9a\x95\xc3\x62\x04\x72\x76\xe4\xa0\xd4\x6e\x4d\x6e\x25\x38\x89\x39\x45\x6b\xf4\x72\x22\xde\xa4\xb6\x96\x39\x47\xb9\xc3\x28\x41\x3c\x47\x8c\x53\x0d\x86\xa8\x2d\x28\x06\xb7\xf8\x8d\xfe\x29\x5e\x9d\xb8\x2d\x41\x5a\x50\xea\xe2\x55\xac\xf1\x50\x4b\x6c\x4a\xb5\x03\xec\xcb\x68\xc3\x5b\x40\xe5\xb2\x74\x78\xbf\x41\x29\x51\xe8\x44\x50\x19\x23\x7c\x09\x55\x03\x2b\x67\x56\xd9\x82\x8b\x10\x0a\x3e\x47\x79\xb0\xb1\xf2\xf1\xa8\xee\x4b\xd0\x24\x41\xae\x97\xe2\xd5\x37\x7b\xe4\x05\xab\x2a\x60\x01\xe8\x4c\xc1\x15\xeb\xcb\x18\x9f\x26\x23\xb4\x83\x9c\x52\xa8\x48\xaa\x70\x24\xa6\xd0\xa6\xa9\x95\x0b\xe0\x10\x76\xf5\x2d\xee\xd1\x6c\xb4\x04\x5e\x58\x35\x1e\x82\x98\x7a\x4e\x73\xf1\xde\x6c\x74\x65\x0d\x81\xed\x8d\xac\x34\xda\x9b\x93\x85\x2a\x20\xc3\x77\xa8\xea\xa9\x58\xc3\x55\xc1\xd2\xa2\x79\x21\x39\xfe\xe7\xe7\x8f\x37\xef\x5f\xcc\x89\xe9\x8b\x82\x2a\x5a\xfa\x27\x82\xc4\x8d\xcd\x9b\x42\x8d\xfa\x02\x5e\xf6\x7c\x78\x0d\xd1\x58\xf4\xc5\x07\xbb\xc5\xba\xcc\x64\x02\x32\x0b\x7e\xa7\x4c\x9e\xd3\x23\xa4\x7e\x79\x11\x23\x17\x3a\xa9\x7d\xf4\x6b\x7e\x86\x1b\x7e\x00\x85\x64\x0a\x26\x6b\x1b\x95\xf7\x14\x5a\x82\x57\x7f\x1c\x96\x0f\xba\x0e\xe0\xff\x7d\xa5\xa0\xf0\x3b\x17\x98\x22\x1e\x10\x83\x19\x0d\x9a\x46\xdd\x43\xd5\xf6\xa5\x08\x1f\xb7\x57\xe9\x64\x26\x7f\xf0\x7d\x07\x89\x15\x78\x99\x0f\x4b\x17\xdd\x4d\x98\xc7\xd8\xce\x10\xbe\x5d\x7b\x90\x45\xd4\xe8\x7a\x52\x8e\x50\x2e\x5d\x32\xed\x3d\x6e\x09\xe2\x79\x7e\xbe\xde\x38\x0f\x9f\x75\x51\x5a\x24\x73\xa8\x39\xde\xa0\x5e\x73\xaf\x4a\x6c\x84\x68\x37\x89\xba\xa4\x7f\xe2\xdf\xd7\x62\xf6\xb9\x01\xb8\x89\xd8\x64\x46\x88\x8d\x89\xdb\x7c\x5e\x43\x41\x5e\x52\x67\xe4\x18\x92\xa7\xca\xe9\x95\xc1\xfb\x22\x10\x73\xae\x18\x84\x8e\xb9\xa8\xd5\x3d\x20\x7a\x28\xb3\x72\x35\xb4\xc0\x47\x03\xd5\xd4\x1a\x85\x1d\x8f\x67\xfa\x0c\x8f\x9f\xe9\xca\xd5\xcf\xd1\x3a\x28\xc3\x03\xa8\x4a\x65\xfa\x1e\xc2\xf0\x2b\x5f\xa4\x51\x98\x35\x49\xe0\xdc\x1e\xc1\xd8\x00\x9b\x55\x55\xd9\x0a\xb6\xdc\x62\x40\xf3\xb5\x60\x03\x28\xd7\x8c\x91\xa9\xc1\x81\x96\x30\x6c\xc6\xe8\x86\x3a\x9d\x78\x5c\x90\x46\x1e\x57\xfc\x80\x2a\x42\x53\x55\x90\x44\xa0\x7b\xa0\x6a\x7b\xca\x9f\x14\x84\x25\x12\xb5\x8d\x27\xa5\x77\xb0\x4c\xdb\x9c\x41\x14\x45\x58\x20\xde\x53\x41\xf0\xf1\xb6\x96\xce\x73\xab\xd7\x95\x52\x7e\x26\x00\x6d\x06\x46\xb1\x2d\xb1\x18\xfb\xe3\x3e\x81\x34\xd0\xd2\xc1\xe9\xc5\xdb\x28\x8f\x83\x87\x22\xc1\x47\x6e\xf0\x54\x88\x83\x8e\x46\xf3\x08\x72\x12\x8a\x0e\x8e\x61\xf1\xff\xe0\x16\xbc\xe9\x28\x65\x88\xcd\xc4\xde\x73\x4e\x16\x20\x86\x74\x20\x37\x4e\xd3\x05\x19\x10\x28\xcb\x4a\x97\xdc\x2c\xbd\x6b\x7f\x60\x05\xde\x9a\xd8\x40\x07\x33\xc4\x3e\x86\x9a\xf9\xb0\x0a\xa6\x0d\x89\x18\xf8\xc6\x10\x10\xbf\x43\x59\xb3\x8d\x8b\x2b\xbe\x9d\x84\x4e\x79\x81\x17\x24\xce\x1b\xd0\x33\xdd\x90\xec\xd4\x75\xaf\x2d\xe2\xf2\xac\xf1\xe3\x80\x4a\x1a\x97\x13\x94\xf6\xc2\xda\x3f\x46\x13\x84\x5f\x2c\xec\xaf\x44\x2e\xcd\xaa\xa1\x28\x17\xef\x2c\x86\x38\x24\x6c\x61\x01\x71\x46\x4a\xd4\x86\x1a\x28\x82\x37\x62\xf6\x74\x26\x9e\xb9\x06\x5c\x0f\x6a\xcd\x9e\xba\xd9\x39\xfc\x37\x85\xff\xaa\x7a\x39\x7f\x3e\x12\x18\xae\x4f\xd7\x2c\x5c\xad\x6b\xaa\x45\xc4\x07\xc0\x27\x5d\x2f\xa9\xac\xe5\x5c\x7c\x42\xa1\x04\x53\xa1\x26\xb6\xc2\xb7\x3a\xcf\xc1\x43\x34\x3e\x68\xc7\x14\x85\x76\x0b\x05\x70\x57\xc5\xfe\xaa\x4d\xa4\x10\x5b\x67\x1d\x1d\xb0\x40\x00\xd1\x6c\xb4\xd6\xae\xb4\xa1\xc4\x57\x79\x58\xef\xb9\x7f\x06\x7d\x9f\x8b\x23\x02\xdb\x36\xc8\xec\x0f\x09\xee\x49\x35\x5c\xc2\xba\x56\x01\xe0\x0c\x53\x75\x9c\xf9\x3e\xfb\x9b\x2a\x8f\x69\xfb\x56\xfc\xf6\xe9\x43\x1c\x28\x60\xf6\xd1\x74\x8a\xcc\x86\x4c\xe1\x2c\xd1\xf1\xb3\x21\x23\xb8\x60\x75\x3a\x2c\x26\xbf\x58\x41\xeb\xa1\x90\x6c\xb1\xb6\x64\x38\x2d\x6b\xb9\x96\x15\x78\x00\x2b\x3a\x08\x7f\xe6\x9e\x0f\x38\x7b\x86\xb5\xb5\x49\x0e\x20\x23\x72\xfe\x03\xc7\x70\xf4\x10\xf6\x30\x5f\xa5\x29\xb2\x80\x54\x20\x29\x75\x1b\x90\x63\xb8\x41\xd8\x25\x15\x22\x4c\x14\xc4\x45\x20\x13\xc1\xac\x77\x7c\x31\x17\xbf\xd8\x96\x19\x7a\x18\x0c\x00\x09\x05\x07\x56\xc3\xa3\x42\xee\xfa\x61\x06\x3d\x05\x55\x5e\x2f\xde\x3c\x75\xaf\x5f\x2c\xde\x30\xbd\x80\xdf\x17\xf4\x93\xfd\xd5\xf5\xc8\xe5\xeb\x45\xf5\xe6\xb5\x26\x7a\xfd\x86\xdd\x07\xa1\xdc\x13\x80\x88\x33\xd8\xf1\x01\x11\x4f\xd3\x56\x86\xdb\xe7\x76\xf2\x0d\x60\xbb\x81\x15\x89\x23\x28\x32\xe4\xb2\x24\x70\x87\xb7\xe0\x42\x79\x49\x69\x43\x31\xe5\xad\x58\xc1\x83\x98\x16\x8c\x4d\x83\xb9\x43\x59\x87\x6d\x06\x4a\xc6\x51\x99\x81\x84\xe3\xec\x30\x53\xe9\x41\x68\xe1\x8b\xb3\x83\xab\x82\x40\xb9\x84\xf4\xf6\xdd\x6c\x4f\xc2\x31\xf0\x3a\xe0\x3d\xb1\x4c\x02\x3c\xd3\x46\xf1\xe4\x03\xa8\xe6\xfe\x86\x45\xa4\x47\x10\xfa\xe0\xc1\x23\xe9\xe8\xe8\x4b\x77\xe2\xd1\x3f\x36\x75\xd9\xd4\xac\x60\x0f\xf0\xb7\x30\x99\xa1\x3e\x36\xec\xcb\xf6\x56\xf6\x20\xec\x60\x81\xf0\xb7\xb7\xef\x0d\x10\x1b\x84\xa5\x29\x49\x8e\xe2\x72\xfe\x6a\x83\x12\x31\xae\x42\x4c\xf8\x3d\xe4\xa1\x23\xec\xd3\xa1\x1e\x9b\x88\x1f\x62\xc3\xb1\xef\xd9\xa9\xd5\x35\x18\xb1\x37\xc0\x5b\xd8\x86\xe1\x65\x38\x6f\x18\xf2\xb5\xf1\x82\x36\xc5\x9b\x5c\xdd\xd3\x1c\xf2\x58\x5b\xb2\x15\xfa\xc6\xf4\xcc\xc1\x80\xa1\x36\x9c\xfb\xfc\x03\xe4\x13\x93\x3f\x98\x13\xd4\x84\xea\x75\xa7\xcb\xc3\xb6\x8c\xa4\x23\x63\x65\xa7\xc6\xda\x75\x41\x89\x54\x2b\xc0\x3a\xc8\xd1\x8d\xcd\x73\xd0\x06\xed\x50\xbb\xa4\xba\x36\xb6\x01\xe0\x39\xae\xbd\xa8\xb9\x5e\x78\x59\xe5\x21\x4b\xc4\x81\xef\xf1\x16\x09\x5b\x26\x2c\x53\xfe\xad\xa6\x89\xe3\xec\x23\xae\xe3\x38\x95\xef\xc0\xf1\x71\x94\x60\x85\x2e\x65\xc5\x2d\xd3\x14\x7f\xfc\xeb\x0d\xf8\xc7\xe6\x8e\x55\xf2\x34\x8b\x23\xbe\x3c\x6c\x64\xa4\x1a\xd9\x75\xfd\xd8\xc4\x6c\x1b\xbb\xfe\xab\xa9\x87\xad\x19\x08\x93\xb5\x92\xa9\xaa\xda\x3b\xef\x2a\xb4\x69\x78\x2e\x5c\xeb\x6b\x4a\x8a\x25\x7b\x77\xbf\xa5\xbe\x70\x82\x07\x31\xf9\xd3\x6a\x53\x1c\x71\x07\x30\xdd\xc8\x44\xb8\x7c\x62\xec\xdd\x00\x68\x76\xb1\x3b\x82\x02\x05\xb7\x35\xbf\xa3\xf4\x8e\x0e\x6f\xec\x74\xc6\x71\x03\x7e\xa7\x61\x37\xbd\x8e\xc0\xf1\x87\x2d\x14\x95\x31\x70\xc4\x41\xa3\x12\x78\x07\xb5\x2a\x95\xe4\x34\x38\xd6\x1d\x4c\x86\x7d\x30\x35\x8b\xd2\x30\xc8\x0f\xa2\x11\x27\x44\x72\x42\xd2\x43\x90\x02\x16\x47\xa5\x93\xf6\x75\x1e\xbd\xa7\x34\xd8\x1f\x1a\x7f\x1e\x7e\x14\x5a\xda\x3b\x80\xe8\x87\xed\x8c\x54\x23\x2b\xdf\x9d\x68\xe2\xcf\xb5\xf5\x29\x4d\x73\x45\x9c\x72\xe4\x0a\x7a\x1d\x80\x10\x6e\x38\x5a\x0b\x79\x82\xc7\xf5\x2f\x74\x0e\x2a\xd9\xd2\x8e\x54\xa5\x57\x5c\x38\x0f\x9c\x7c\x32\x5e\x7c\x6c\x8a\xf5\x3b\xf0\x00\x07\x63\xef\xbe\x07\x26\x4d\xc7\x88\x36\xdc\x0b\xe0\xdc\x6d\xa5\xaa\xb6\xbd\x30\xe1\x91\xf0\x8f\xc4\x56\xba\xd8\x67\x4c\x01\x7f\x0a\x32\xed\x01\xab\x07\xab\x97\x07\x2e\xc9\x4e\x36\x62\x43\x79\xd8\xfc\x48\x35\xb2\x64\xf1\xa8\x34\x0c\x31\x42\x59\x88\x3f\x38\x2f\x63\x22\xc4\x5e\x67\x03\x88\x54\x56\xab\x06\x07\x8c\xc7\xdc\x0b\x9e\x41\x12\x18\x74\x7a\x36\xd0\x03\x4c\xc4\xb0\x25\xc8\x19\xf5\x70\x98\x73\x76\x13\xbb\xd9\x81\xad\x03\x77\x7c\x8d\x04\x08\x85\x00\x4d\xef\x06\x8a\x7a\x07\x01\xf1\x85\x13\xd1\x0e\xd8\xa1\xa4\x04\x5a\x75\x6c\xb1\xb2\x26\xe7\x6e\x8d\xdb\xaa\x76\x15\xa2\x0a\xe9\xd2\x6e\x83\xdd\xb9\x6d\x04\x7b\x10\x31\xf8\x91\xb0\x31\x92\x8e\x7c\x89\x4f\x26\x01\x63\xbf\xff\xf8\x3b\xd0\x22\xf5\x0c\x7f\x2f\x54\x4c\x70\xba\xf4\x30\x1e\x40\x39\x34\x83\x1a\x4b\x1e\x36\x83\xa0\x5f\x0f\x81\x76\x15\x3e\x12\x7e\x42\x43\xc9\xc3\xf2\x23\x7c\x12\x48\xc7\xa6\x5f\x7e\x41\xab\x03\x6c\x17\xf8\x3a\x31\x8b\x95\x8a\x87\xf7\xf8\x26\x54\xbb\xbb\x47\x36\x3b\xd8\x28\xfb\x83\x75\xc7\xa0\x6d\x15\x6c\xfb\x65\x7a\x4b\xc0\x2f\x0e\xd2\x60\x6e\xda\xda\xb1\xd1\xb1\xd5\x3f\x92\x8e\x6d\xd4\x14\xd3\xb5\xff\xf1\x3d\xce\xb4\xf5\x1e\x57\xe7\xe3\x24\x24\x9a\xab\x37\xef\x1d\x8c\x41\x1e\x08\xca\x32\x6f\x2a\x99\xc7\xef\x1f\x0e\xd8\x7e\x7a\x26\x4d\x0c\x4b\x1c\x4d\x1c\xb6\x38\x91\x9d\x6a\xc1\x5f\x25\x8d\x02\xfa\x5f\x71\x1c\x53\xba\x69\x47\xcc\xdf\xf7\x7e\x48\x85\xe3\x34\x62\x85\xe3\xef\xbc\x02\x90\xb9\x63\xf5\xd3\x73\xc1\xb3\xdd\x63\xa7\xf0\xf1\xe0\xfd\x41\x11\xc2\x7a\x5e\x1e\xeb\x4c\x7b\x2b\x85\xaf\x14\x0f\x5b\x8b\xe9\x46\x31\x58\x9d\x98\xbf\x9f\x88\x8d\xef\x8c\xc2\x90\x9e\xaa\x27\xbd\x35\x3f\x64\x48\xd6\xa2\xed\x62\x46\x1c\xda\x3e\xa6\x77\xc7\x84\x7d\xed\xa9\x9d\x3a\xa2\x4b\x24\xb2\xf1\x99\x27\xa3\xe6\xc1\x43\x03\x1b\xd7\xb9\x07\x16\x3b\x9e\x73\x13\x02\xcf\xf3\x70\x3b\xd0\x4b\xc7\x43\x26\x20\xda\x84\x0f\x30\xf4\x34\xad\x8e\x13\x02\x96\x9b\x63\xda\x11\xa6\x3b\x35\x25\x3e\xd1\xae\x93\x73\xe2\x84\x84\xe0\x5e\xe5\x31\x19\xc1\x27\x1a\xa7\x84\x5f\xdf\x93\x13\x60\xc4\xf0\xc1\xe4\x41\x9b\xb5\xb4\xe3\x41\xd4\x9e\x75\x77\xea\xa5\xf7\x39\x44\x4f\xf8\xf0\x13\xae\x37\xfa\x02\x31\xf5\x17\xb7\x8d\x9d\xdf\xff\xba\xf8\x21\x14\xcd\xfc\x68\xf9\xa8\x26\x19\x91\x06\xbf\x7c\x69\xb3\x8b\xa5\x75\x3f\xd3\xdc\x97\x5e\xb4\x6f\x88\x27\x3d\x57\x44\x8b\xab\x47\x70\xf5\xfb\xc2\x54\x3b\xb3\xf8\xfe\x9a\xda\x00\x1c\x96\xb3\xa7\xf8\xab\xbc\x23\xdc\xc4\x84\x63\x5f\xc0\xfa\xc4\xe2\xa9\x09\x0e\xdd\xa0\x2d\xf4\x5f\x1e\xfb\x7f\xd9\x85\x0a\x78\x3a\x51\xc6\x36\xab\xf5\x43\x2f\x65\x01\x73\x13\xcd\x54\x12\x74\x5f\x5c\xca\x60\xa3\x81\x73\xfc\x6a\xf0\x0a\x27\x02\xef\x6e\xbd\xe1\x69\x62\x5e\x1c\x35\x6c\x9c\x9c\x33\x4e\x8e\x19\x1f\xbc\x68\x73\x49\xdf\xe1\x8a\x8d\xe5\xf7\x59\xc8\xf6\x11\xb3\x46\x5f\x44\x12\x64\x93\x76\xdf\x1b\x71\x27\x12\x6a\x0c\x3d\xee\x88\x41\x38\x3d\xe0\x8f\x7f\x44\x36\xaa\x26\xc3\xcd\x63\x1d\xa3\xf9\x8e\x9f\x50\x3e\x38\x9c\x9c\x9e\x4d\x7e\x99\x3d\xff\x4b\x03\xca\xc7\x3b\x68\x0f\xc3\x53\x7d\xd4\x61\x43\x7c\x6a\xbb\x5a\xe5\xea\xe8\xca\xd2\x23\x1f\x39\xaa\x7d\x3a\xf5\x68\x7a\xfd\xe4\xf2\x73\xcb\x42\xda\x6f\xee\xc2\x67\xe4\xf1\x43\x67\x6b\x5e\xd8\x2c\x3b\x3c\x98\x27\x46\x69\x02\xb4\x38\x54\x88\xec\x5a\x46\xb1\x36\x78\x52\xd1\x67\xdb\x63\x62\x8e\xe6\x61\xd0\xf6\xc4\x64\xa3\x2a\x47\xdf\x3a\x1f\x32\xbb\x27\x1c\x59\x6f\xf3\x25\x3d\x51\x08\x09\xcf\xbc\xf7\x1d\xea\x21\xdb\x05\xcd\xdb\xcf\x8f\xdb\xa5\x18\x8a\x3e\xc4\xc2\xe7\x5f\x07\x0f\x49\x74\xe3\x33\xda\x93\x27\x7c\x57\x74\x97\xf2\x29\xfd\xe7\x60\xd0\x1e\x4b\x13\xc7\x4f\x98\xaf\x61\xbe\x03\x48\x6b\xca\x28\xbc\x8d\x66\xba\x5b\x7d\xc4\x94\x18\x52\xdf\x75\x07\xc3\x58\x23\x2a\x05\x77\x8c\xc3\x54\xf4\xec\x7a\x2f\x9b\x71\xc7\xf8\x55\x7b\x53\x43\x40\x26\x15\x1e\x20\xf2\xfa\x9d\x76\xbb\x38\xe2\x0a\x9f\x09\xd2\xf9\x64\x8e\x5f\x1f\xf3\x5b\xc8\x8c\xdf\x97\x9b\xb4\xfb\x7b\x08\x54\xfc\xa0\xc5\xbb\xa5\x5f\xcd\x82\xb5\xdc\x03\x0c\x98\xa6\x03\x74\xfa\xb5\x27\x02\x99\xd6\xf8\x7e\xcc\x15\xd9\xfd\x27\x00\x00\xff\xff\x6b\x4e\xc6\x2b\x1c\x35\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 13596, mode: os.FileMode(420), modTime: time.Unix(1468207090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

