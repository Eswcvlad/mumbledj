// Code generated by go-bindata.
// sources:
// config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\xdd\x8f\x1b\x37\x92\x7f\xd7\x5f\x51\x91\xcf\x38\x1b\x98\x55\x3c\xbe\xcd\xee\x42\xf0\x3a\x98\xd8\xbe\x8b\x0f\x76\x1c\xd8\xce\x02\xfb\xd4\xa0\xba\xab\xd5\xdc\xe9\x26\x7b\xf9\x21\x8d\xf2\xd7\x1f\xaa\xf8\xd1\x2d\xb5\x66\x24\x8d\x03\xdc\xbc\xc4\x62\x17\xab\xc8\xfa\xe2\xaf\x8a\xcc\x13\xf8\xe8\xbb\x55\x8b\x6f\xff\x77\xf6\x04\x7e\xda\xc1\x47\xe1\x5c\x23\xd1\xc3\xff\x18\x89\x6b\x34\xb3\x27\xf0\x46\xf7\x3b\x23\xd7\x8d\x83\x67\xe5\x73\x78\xf9\xe2\xfa\x2f\x13\x2a\x78\xf6\xf1\xfd\x57\xf8\x20\x4b\x54\x16\x9f\xcf\x9e\x40\xa9\x55\x2d\xd7\x8b\x9d\xe8\xda\xd9\x4c\xf4\xb2\xb8\xc5\x9d\x5d\xce\x66\x00\x00\x4f\xe0\x9f\xda\x7f\xf5\x2b\x84\x9b\x5f\xdf\xc3\x2d\xee\x16\x3c\xbc\xd3\xde\xf9\x15\x2e\x61\x3e\x4f\x74\x5f\xb4\x57\xd5\x9b\x56\xfb\x6a\x9f\xf4\x09\xfc\xf2\xe9\xeb\xbb\x25\x7c\x6d\x32\x0f\x90\x96\x38\x18\x28\x5b\x89\xca\xc1\xfb\xb7\x81\xd4\x12\x8b\x92\x58\x04\xc6\xb3\x0a\x6b\xe1\x5b\x37\x2c\xe6\x6d\x18\x80\x52\x77\x1d\xcd\x74\x1a\x56\x08\xa2\xef\x5b\x89\x15\xff\xd2\x6e\x5f\xec\xfb\x9a\x44\x41\xa5\x41\x69\x07\x5b\xa1\x1c\x88\x3c\x7d\xb5\x83\x28\xe2\x0a\x2c\x32\x3b\xec\x7a\xb7\x03\xeb\x8c\x54\x6b\x78\x36\x9f\x3f\x0f\xec\xe2\x8c\x25\xcc\x7f\xc6\xb6\xd5\xdf\xc1\x7b\x10\x1d\x08\x96\x07\x5f\x77\x3d\xc2\x77\x0d\xb6\x3d\xd4\xda\x80\x80\x56\x5a\x07\xba\xe6\x59\x42\x55\x76\x31\x9f\x6c\xa0\x11\x4a\x61\xcb\xf4\xae\x41\xe2\xc3\xd2\x95\x43\x03\xbe\xd7\x8a\xac\xa2\xb0\x74\x52\xab\xa3\x1b\xda\x4a\xdb\x1c\xce\x8e\x53\xe8\x9f\x34\x6a\xb4\xce\x82\x4e\xee\x2f\x90\x8d\x0d\xfa\x26\x2c\x9e\x26\x79\x8b\xf4\x9f\xbe\x15\x3b\x10\xbe\x92\x1a\x6a\xd9\xa2\x5d\xb0\x51\xdd\x56\x83\xf5\x7d\xaf\x8d\xc3\x0a\xca\x46\xcb\x12\x2d\x08\x83\x30\xaf\xeb\xae\xc7\xf5\x1c\x88\xcd\x5c\x6c\x4a\xad\x36\xf3\x20\x8f\x58\xa1\x29\xa2\x82\x96\x99\x74\x36\x9b\xfd\xdb\xa3\xc7\x6c\xf1\xcf\xc2\x49\xda\x8e\x70\xd0\x79\xeb\xc8\xdc\x1d\x3a\xd0\x06\xf0\xae\x44\xac\x82\xd9\x9d\x91\x6b\x72\x6d\x01\xce\x88\xf2\x16\xec\xad\xec\x83\x20\xfe\x5d\xd0\xef\xc2\x10\xab\x25\xbc\x58\xfc\xf0\x58\xe6\xb4\x6a\xb6\xed\xc0\x3f\x0d\xdd\x27\xe2\xa3\xb8\x93\x9d\xef\xe2\xba\x2a\xcf\x14\x0a\xa4\x02\x8b\xa5\x26\xdf\x80\x2f\xc1\x32\x2f\xd8\x9c\x5e\x19\x24\xeb\x94\xa4\xcc\x44\x1e\x44\x75\xe2\xae\x08\xdb\x49\xe3\x4b\x78\x71\x54\x8e\x85\x1e\x4d\x5e\xda\x43\x12\x12\x8d\x3d\x10\x61\x8b\x1e\x4d\x91\xbe\x2e\xe1\x87\x2c\xe8\xbd\x05\xdb\xf8\xba\x6e\xc9\x81\x50\x89\x55\x8b\x15\x6c\x1b\x54\xd9\x13\xad\x13\xc6\xd9\x1f\x99\x5e\x78\xa7\x3b\xe1\x64\x59\x84\x49\x58\xd0\xaa\x6b\xd1\x5a\x4c\x0c\x6f\x94\xd2\x5e\x95\x18\x55\x24\x55\xad\x4d\x17\xb4\x24\x5c\x60\x8a\x6b\xa9\x14\xc9\xd3\x75\xf4\x3f\x5a\xd9\x4a\x94\xb7\x51\x4a\x64\x51\x28\xdc\xc6\xf5\x2f\xc1\x19\x8f\xb3\xd9\x6c\x88\xa3\xec\x53\x37\x55\x65\xd0\xda\xb0\xd8\x46\xfb\xb6\x02\xe1\x1c\x45\xc6\x7e\x14\x05\x9d\x88\x40\xbd\x84\xf9\xf5\xcb\xbf\x2e\x5e\x2c\x5e\x2c\xae\x73\x8c\xfc\xaa\x8d\x3b\x93\x0d\xc5\xc7\x12\xe6\x7f\xf9\xf3\x5f\xff\xeb\x6f\xc3\x7c\x61\xed\x56\x9b\x8a\x0d\x93\x56\xaa\xd6\x34\xdf\xa2\xd9\xa0\x99\xc4\xbe\xd2\xd0\xc7\x49\xa7\x62\x3a\xd1\x8d\x83\xfa\x37\x8b\x46\x89\x0e\x59\x60\x3a\x4d\x02\xb9\x8f\x9f\x96\x30\x4f\x1f\xf2\xb4\xff\x96\x2d\xf6\xc2\x35\x31\x19\x18\xe8\xaf\x5f\x72\x0e\x08\x09\xcf\xbb\x06\x95\x93\xa5\xe0\xc5\x0b\x0b\x02\x0c\xae\xa5\x75\x68\xb0\xe2\x09\x47\xf7\x91\x78\x48\x0b\x8a\xa3\xed\xd4\x8e\x88\x53\xd1\x5f\xbf\xdc\x3b\x77\x82\xe6\x93\xf3\x25\x0b\x08\x8a\x31\x8b\xa5\x37\x38\x4a\xa5\x3f\x66\x9f\x3b\xf6\x15\x2a\x8d\x96\xcf\x89\x0d\x1a\x59\xef\x98\x69\x89\xc6\xc9\x9a\xf6\x86\xe4\x7e\x34\x14\x4c\x43\x5b\x8f\xec\x4a\xad\x2c\xed\x56\x95\xbb\x05\xbc\x77\xb4\xa1\x15\x5a\xde\x49\x8b\x62\x83\xe0\x1a\x69\x41\xab\x2b\x58\x79\x07\x95\xb4\x14\x35\x20\x1d\xc8\x90\xcc\x29\x59\x36\x62\x23\xd5\x3a\x32\x94\xd6\x7a\xb4\x07\x1e\x21\x92\x60\x52\xb9\x41\x30\x3e\x04\x45\xe7\x5b\x27\x7b\x62\xa8\xac\x13\x8a\xb2\xaf\xae\x0f\x8c\x9b\x76\x7b\x10\x7b\x63\xbb\x8e\x37\x4a\x66\x39\x66\xb2\x43\x9a\xf3\x4d\x47\x33\xc7\x66\xbb\x4f\x32\xc1\x83\xfb\xa4\x47\xe8\x70\x9e\xc0\x5b\xdc\x8d\xe5\xdd\x94\x25\x85\xbc\xd3\xb7\xa8\xe8\x3f\x20\x95\x74\x52\xb4\xf2\x77\xcc\xbe\xb3\x95\xae\x21\xb6\xbd\x30\x82\x92\xe3\x6a\x17\x4e\x70\x7b\x6c\x31\x62\x8f\x21\xd9\xe3\xbc\x75\x85\x79\x45\x98\xf7\x90\x23\xa7\xcc\x29\xda\x76\x37\x4e\x2c\x06\x9d\xd9\x8d\xbd\x76\xec\x1a\xa2\x26\x00\x51\x49\x3b\xb8\x4e\xf0\x79\x9e\x55\xc4\x7c\x9d\x92\x63\x10\xfc\xb3\xde\x42\x27\xd4\x0e\x9c\xec\xd0\xa6\x54\x76\x18\x50\x2c\xf9\x00\x61\x04\xa1\x63\x01\x91\xda\x2e\xe1\xfa\xc5\x84\x7f\x3c\xf1\x0e\x25\x6c\x05\x45\x82\xfa\xd3\x0a\xdd\x16\x71\x8c\x7c\xe2\x5e\x13\xd3\xb1\x20\x49\x48\x69\x23\xda\x25\xfc\x40\x49\x5e\x94\xcd\x80\x19\xde\xd0\x2f\xb0\x5a\xad\x2d\x25\x23\xd7\xe0\x8e\x0d\x54\xe9\xad\x6a\xb5\xa8\xb0\x0a\x9c\xb2\x36\xf6\x62\x22\x9f\xa4\xda\x89\x36\x78\xb9\x25\x2f\x21\x3c\xc7\x8c\x2b\x69\xb0\x74\xda\xec\xe8\x14\xff\x28\x7f\xca\x47\x27\x4d\x2b\x88\x76\x09\x3f\x5c\xbf\xcc\x39\x1e\x8d\xd4\x15\xe7\x0e\xd9\x61\x40\x1b\x51\x03\xd8\x8a\xde\xd2\xf9\x56\x6b\x83\x64\x44\xad\xd6\xe4\xe1\x65\x8b\x82\x32\x67\x6d\x74\x17\x92\x10\x09\xbe\x22\x79\x8d\xf6\x26\xfa\x23\xde\xf5\xd2\x60\x41\x5c\x97\xf0\xf2\xcf\xf7\xc8\x4b\x5a\x45\x51\x36\x50\x36\x58\xde\xa6\x34\x16\x76\x53\x33\xda\x21\x4e\x15\x48\x87\x9d\x65\x31\x9d\x54\xde\xa1\x4d\xe0\x10\xcb\xdb\x7d\x8d\x47\x34\x9b\x35\x41\x07\x96\xa3\x4d\x30\xd3\xc8\x69\x01\xef\xd4\x46\x1a\xad\x18\x6c\x6f\x84\x91\xa4\xef\x10\x2c\x9c\x01\x03\x7c\xf7\x16\x2b\x68\xd0\xc4\x98\xcf\xea\x5d\xc2\xfc\x3f\x7e\xfe\xf4\xf1\xdd\xf7\x0b\x66\xfa\x7d\xc7\x19\xad\xfa\x17\x81\xc4\x8d\x6e\x7d\x87\x93\xba\x20\x0c\x47\x3e\x61\x8c\xd0\x58\xb6\xc5\x07\xbd\xa5\xbc\x1c\xc8\x40\xb4\xad\xde\x62\x15\xc8\x5b\xfe\x44\xd4\x2f\xae\xb3\xe7\xca\x75\x73\x1f\x7d\x13\xbe\xd1\x84\xbf\xcd\x66\x33\x51\x75\x52\x0d\x85\xca\x3b\x76\x2d\x08\xa3\x3f\x1e\xa6\x0f\x3e\x0e\xa4\x4d\x99\x82\xdd\xef\x0a\x28\x44\x22\x20\x86\x52\x28\x52\x0d\xde\x61\xe9\x63\x2a\xa2\xcf\xc3\x51\x7a\x34\x92\x3f\xc4\xba\x83\xc5\x02\x1d\xe6\x87\xa9\x8b\xcf\x26\x8a\x63\x2a\x67\x18\xdf\x36\x11\x64\x31\x35\x99\x9e\x17\xc7\x28\x97\x0f\x99\xe1\x1c\xd7\x0c\xf1\x22\xbf\x98\x6f\x6c\x84\xcf\xb2\xeb\x35\x91\x59\x5a\x39\x9d\xa0\x71\xe5\x71\x29\xb9\x10\xe2\xd9\x2c\x6a\xc9\xff\xa4\xbf\x3f\xc1\xfc\x8b\xef\xd1\x10\x36\x99\x33\x62\x0b\xc4\x43\x3c\x37\xc2\x88\x92\x2b\x23\x1b\x20\x79\x85\x56\xae\x15\x9d\x17\x89\x38\xc4\x8a\x22\xe8\xd8\x82\xc3\x3b\x07\x1d\x5a\x2b\xd6\x87\x1a\xf8\xa4\xda\x1d\x68\x85\x54\xf1\x44\xa6\xcf\x68\xfb\xb5\x34\xd6\x3d\x27\xed\x90\x8c\x08\xa0\x0c\xd6\xf2\x6e\x09\xf3\xef\x62\x92\x26\x61\x5a\x15\x89\xf3\xb0\x05\xa5\x13\x6c\x46\x63\xb4\x59\xc2\xfc\x2b\x39\x74\x38\x16\x74\x02\xe5\x32\x60\x64\x2e\x70\x16\xf3\x3c\x99\xbc\x5b\xaa\x75\x11\x71\x41\x95\x79\xbc\x09\x1f\x38\x23\x78\x63\x50\xb9\x76\x97\xd0\x43\x35\xd4\x94\x3f\x61\xab\xb7\x44\x34\x14\x9e\x1c\xde\x49\x33\x43\x71\xb6\xda\x0d\xb0\x00\xde\x71\x42\x88\xfe\xd6\x08\x1b\xb9\xb9\xc6\x20\xc6\x9e\x80\x37\xec\xc5\xba\xa7\x64\x1c\xb7\xfb\x04\x44\x2b\x85\x45\xbb\x84\x9b\x2c\x2f\x38\x0f\x7b\x42\xf4\xdc\x64\xa9\xe4\x07\xa3\x15\x2d\x32\xc8\x29\xd8\x3b\x82\x0f\xc3\xdf\x41\x93\x6d\x42\xc8\x30\x9b\x23\x73\xaf\x42\xb0\xc0\xdf\x29\x1c\xd8\x8c\xc7\xe9\x92\x8c\x0a\x6d\x69\x64\x1f\x8a\xa5\xb7\xc3\x0f\xca\xc0\x5b\x95\x0b\xe8\xa4\x86\x5c\xc7\x70\x31\x9f\x46\xa5\xcd\x81\x98\xf8\x66\x17\x80\x7f\x08\x23\xb5\xb7\x79\x24\x96\x93\x62\x47\x5a\xb0\x94\xf8\x18\x0f\x8f\x5d\x72\x94\xd7\xe3\x6a\x09\x97\xd7\x3e\xb6\x03\x8c\x50\xb6\x65\x28\x1d\x85\x0d\x7f\x01\x4d\x30\x7e\xd1\xae\x41\x03\xad\x50\x6b\xcf\x5e\x0e\x6f\x35\xb9\x38\x18\xec\xf4\x06\x07\x4a\x5a\x0d\x17\x50\x0c\x6f\x60\xfe\x74\x0e\xcf\xac\x2f\x1b\x5a\xd6\xfc\xa9\x9d\x5f\xc1\xfc\x69\x35\xbf\x02\x74\xe5\xe2\xf9\x44\x60\x3a\x3e\xad\x5f\x59\x27\x1d\xe7\x22\xe6\x63\xbc\xe2\xe3\xa5\x12\x4e\x2c\xe0\x33\x09\x65\x98\xda\xa0\x1d\x84\x6f\x65\xdb\x42\x29\xb8\x7d\x30\xb4\x29\x3a\x69\x57\xd8\x88\x0d\xe6\xfa\x6a\x08\xa4\xe4\x5b\xb3\xd1\x1a\x28\x41\x88\xaa\x9a\x4f\xc6\x86\x91\xc1\x95\xc2\x51\x9e\xc6\xf7\xcc\x3f\xbf\xa9\x2a\x9b\x5b\x04\x7a\x28\x90\x83\x3d\x04\x74\x58\x49\x01\x56\x3a\x4c\x00\xe7\x30\x54\xa7\x91\x1f\xa3\xdf\x9b\x36\x87\xed\x0d\xfc\xf6\xf9\x43\x6e\x28\x50\xf4\x71\x77\x8a\xd5\x46\x4c\x45\x55\x65\xc3\xcf\x0f\x19\x6d\x44\x2b\xab\xc3\x64\xf2\x8b\x06\x1e\x4f\x89\x64\x4b\xb9\xa5\xd6\x5e\x8d\xb8\xf6\x46\x6f\x24\x65\xf4\xdf\x3e\x7f\x78\x66\x9f\x1f\x70\x8e\x0c\x9d\xd6\x45\xab\xd5\x3a\x73\xfe\xa7\xf6\x26\x7c\x7c\x66\x9f\x07\xbe\x28\xd9\xb3\x9c\xd6\x40\xa4\x5c\x6d\x28\xe0\x09\xa0\x4b\x4e\x44\x14\x28\x84\x8b\x7a\xa3\x09\xcc\x46\xc3\x77\x0b\xf8\x45\x0f\xcc\xc8\xc2\xb0\x22\xe8\x21\xaa\x0a\x0f\xb7\xaa\x15\xc6\x66\x06\x7f\x5d\xc2\xfc\xd5\xea\xf5\x53\xfb\xea\xfb\xd5\xeb\x40\x0f\xaf\x56\xaf\xaf\xf9\x67\xb0\xd7\xd8\x22\xcb\x57\x2b\xf3\xfa\x95\x64\x7a\xf9\x3a\x98\xef\xa9\xdd\x17\x40\x88\x33\xe9\xf1\x01\x11\x4f\xab\x41\x86\xbd\xcf\xec\x6c\x1b\xdf\x15\x07\x5a\x64\x8e\xe6\xf5\x84\x4b\xc9\xe0\x8e\x4e\xc1\x15\x46\x49\x95\x67\x9f\x8a\x5a\x34\xb0\xc2\x1c\x16\x01\x9b\x26\x75\xa7\xb4\x2e\xaa\x4a\xe1\x9d\x3b\x2b\x32\x88\x70\x1a\x1d\xea\x58\x78\x30\x5a\xf8\xe6\xe8\x08\x59\x01\x48\x2e\x23\xbd\xfb\x4e\xb6\x27\x69\x1b\x74\x1c\x84\x39\x39\x4d\x56\x58\x4b\x85\xa1\xf3\x21\xaa\x6a\x11\x4f\x58\x42\x7a\x0c\xa1\x4f\x6e\x3c\x93\x4e\xb6\x5e\xda\x0b\xb7\xfe\xc9\xbb\xde\xbb\xb0\xc0\x3d\xc0\x3f\xc0\xe4\x00\xf5\xa9\x60\x2f\x87\x53\x39\x82\xb0\x93\x09\x22\x9e\xde\xb1\x36\x20\x6c\x90\x86\x8e\x49\xb2\xec\x97\x8b\x97\x1b\x92\x48\x7e\x95\x7c\x22\xce\x61\x0b\x9d\xa1\x9f\x11\xf5\x54\x45\xe1\x23\x15\x1c\xf7\x7d\xbb\x34\xbb\x26\x25\xee\x35\xf0\x56\xda\x07\x78\x99\xf6\x9b\x9a\x7c\x83\xbf\x90\x4e\xe9\x24\xc7\x3b\xee\x43\x9e\xab\xcb\xa0\x85\x7d\x65\x46\xe6\x16\x72\x6e\xb8\x8a\xf1\xb7\xda\x41\x0e\xfe\xa4\xce\x5a\x9b\x12\xed\xad\xec\x4f\xeb\x32\x93\x4e\x94\x55\x5f\xea\x6b\xef\x3b\x0e\x24\x87\xed\x8e\xdb\xc8\x76\xaa\x9e\x93\x3a\x18\x9a\xda\x3d\xe7\xb5\xa9\x0e\x1a\x61\x43\xee\xa5\x95\xcb\x55\x94\xd5\x9f\xd2\x44\x6e\xf8\x9e\xaf\x91\x34\xe5\x88\x66\xfa\x3f\x54\x35\xb9\x9d\x7d\xc6\x71\x9c\xbb\xf2\x23\x38\x3e\xf5\x12\xca\xd0\xbd\x30\xa1\x64\x3a\xc6\x1f\x0e\x1b\xfc\x53\x75\xe7\x2c\x79\x99\xc6\x09\x5f\x9e\x56\x32\x51\x4d\xf4\xda\x3c\x36\x30\x87\xc2\x6e\xff\x6a\xea\x61\x6d\x26\xc2\xa2\x41\x51\xa1\x19\xce\xbc\x37\xa9\x4c\xa3\x7d\xd1\xd8\xfe\x4a\x79\x61\xc5\xbd\xb3\x6f\xb8\x2e\x3c\xc2\x83\x99\xfc\x4b\x4b\xd5\x9d\x71\x06\x04\xba\x89\x8a\x68\xf8\x42\xdf\xfb\xa8\x37\x68\x73\x75\x04\x52\x39\x1d\xef\x28\xa3\xa1\xd3\x8d\x9d\xac\x83\xdf\xb4\x62\xc7\xcd\x6e\xbe\x8e\x70\x1a\xac\xee\x90\xd3\x58\x6b\x4f\x23\x46\x06\xef\xb6\x10\x06\x8b\x96\x1b\xc7\x72\x84\xc9\xa8\x0e\xe6\x62\x51\xa8\x00\xf2\x93\x68\xc2\x09\x99\x9c\x91\xf4\x21\x48\x91\xaa\xa0\x45\x17\xc3\x75\x1e\xdf\x53\x2a\xaa\x0f\x55\xdc\x4f\xf8\x94\x4a\xda\x5b\xd9\xb6\xa7\xf5\x4c\x54\x13\x2d\xdf\x5e\xa8\xe2\x2f\x4e\xc7\x90\xe6\xbe\xa2\xaa\xb8\xcf\xa5\x2c\x48\x67\x0f\x5b\x6b\x29\x4e\x68\xbb\xf1\x42\xe7\xe4\x22\x07\xda\xc9\x52\xf9\x8a\x4b\xab\xf5\xf1\x2f\xd3\xc1\xc7\x86\xd8\x7e\x05\x9e\xe0\x60\xae\xdd\xef\x81\x49\xc7\x7d\x44\xaa\x50\x0b\x48\xe5\x70\x8d\x66\x28\x2f\x54\xfa\x04\xf1\x13\x6c\x85\xcd\x75\xc6\x31\xe0\xcf\x4e\x26\x23\x60\x8d\x60\x75\x79\xe2\x90\x1c\x45\x23\x15\x94\xa7\xd5\x4f\x54\x13\x4d\x76\x8f\x0a\xc3\xe4\x23\x1c\x85\xf4\x23\xc4\x65\x0e\x84\x5c\xeb\x6c\xa4\x00\x61\xd6\xbe\x43\x75\xd6\xb9\x10\x19\x14\x89\xc1\xa8\x66\xab\x90\x54\x14\x60\x4b\x92\x33\xa9\xe1\x28\xe6\xf4\x26\x57\xb3\x07\xba\x4e\xdc\x2b\x8d\x56\xb9\x82\x01\xcd\xde\x09\x94\xd7\x9d\x04\xe4\x0b\x27\xa6\x3d\x60\x47\x92\x0a\xeb\xf9\xbe\xa0\xf6\x6d\xa8\xd6\x42\x59\x35\x8c\xb6\x3b\xa6\xab\xc6\x05\xf6\xe4\xb4\x21\x08\x7e\x26\x6a\xcc\xa4\x13\x53\xd2\x97\xa3\x78\x71\xbf\xfc\xf8\x23\xc0\x22\x97\x0c\x7f\x2c\x52\x2c\xb4\x6a\x77\x0f\xc3\x01\x92\xc3\x2d\xa8\xa9\xe4\xc3\x5a\x10\xef\xf6\x01\xe8\x78\xc1\x67\xa2\x4f\xe5\xbb\xd0\x2b\x3f\xc3\x26\x89\x74\xaa\xfa\xf2\x1b\x2a\x1d\xe5\xbb\x15\x1a\x4e\x56\x31\x51\x85\xde\xbd\x56\x50\x49\x7b\xfb\xc8\x5a\x87\xea\xe4\xb8\xb1\x71\x17\x74\x48\x82\x43\xb9\xcc\x97\x04\xe1\xde\xa0\x4a\xea\xe6\xa9\x23\x1d\x9d\x9b\xfc\x33\xe9\x54\x47\xbe\x3b\x9e\xfa\x1f\x5f\xe2\x1c\xd7\xde\xe3\xd2\x7c\x6e\x84\x64\x75\xed\xb5\x7b\x0f\xba\x20\x0f\x38\x65\xdf\x7a\x23\xda\xfc\xfc\xe1\x84\xee\x8f\xb7\xa4\x99\x61\x2f\xbc\x3d\x23\xdf\x33\xd9\xa5\x1a\xfc\x55\x70\x27\x60\xff\x11\xc7\x39\x99\x9b\x67\xe4\xf8\x7d\x17\x7b\x54\x0d\x46\x56\xd2\x82\x68\x0d\x8a\x6a\x17\x96\x5f\x5d\x41\x68\xed\x9e\xdb\x84\xcf\x1b\xdf\xef\x13\x11\xaa\x0f\xc3\xd3\x35\xf3\xdc\x74\x3f\x72\x5a\x5f\x89\x72\xe2\x87\x06\xd7\x17\x46\xf1\xe7\xc8\x6a\x38\x29\xc3\xdd\x4c\x7a\x34\x72\x4a\x9f\x51\x55\xc5\x70\xb9\x93\x35\x1b\xde\xb5\x45\x55\x4e\x2e\x7f\xa6\x02\xc6\x3a\x60\xdd\x65\xc0\xf9\xc0\xe4\xa8\xb9\x56\x8b\x33\xb2\x5f\xa0\x9b\x6a\xed\x62\x9d\x11\x9b\x58\x52\xa6\xdb\x0d\x3e\x77\xf8\xb9\xc1\x29\x95\x85\x55\x0c\xe5\xdf\x84\xc3\x50\x00\xee\x1d\xce\x69\xde\xb0\x6b\x8b\x67\x94\xd7\x4c\x76\xc4\x53\x2e\xde\xb4\xc5\x98\xaf\xc2\x09\xba\xda\x85\x0b\x02\x2e\x5d\xda\x36\x9d\xab\x7c\x5b\x7b\x4a\x05\x4c\x5b\x84\x0d\x1c\xc6\x08\x8f\x4e\x53\x89\x41\xeb\xcf\xa9\xe3\x02\xdd\xa5\xc9\xe4\x33\xcf\xba\x38\x9b\x5c\x90\x4a\x42\x91\xf7\x98\x5c\x12\x76\x34\x4d\x26\x71\xfc\x9e\x6c\x62\xd1\xa5\x97\xa6\x27\x75\x36\xd0\x4e\x3b\x78\xf7\x8c\xdb\x4b\xe1\xc2\x97\xe4\x3d\xe9\xc5\x6c\x25\x2d\x3f\xdd\xac\x22\xe4\xd1\xb9\x64\xfe\x4f\x9b\x5f\x90\x71\xb3\x94\x87\xcf\xea\x2e\x10\x46\x0b\xb7\x56\x43\x74\x05\x69\xe3\xf7\xad\xf7\x85\x17\xcf\x3b\x04\xe2\x91\x2b\xc1\xec\xf5\x23\xb8\xc6\x79\xe9\x3a\xa0\xd6\x6d\xab\xb7\x5c\x3f\x3d\xb5\xc9\x52\xe1\x39\xe3\x19\x66\x0a\x84\x53\x5b\x34\xbe\x3e\x32\x78\x69\x80\x0b\x55\xe9\x4e\xfe\x1e\x8b\xa6\x6f\x83\x22\x4a\xbb\x02\x95\xf6\xeb\xe6\xa1\xdb\x6c\x07\x81\xe6\x58\x10\x8c\x6f\x7c\x45\xd2\xd1\x81\x71\xe2\x68\xb2\x4a\x08\x84\x30\x7b\xb0\x46\xa4\xc9\x71\x71\x56\x97\xf6\x68\x83\xf6\x68\x7f\xf6\x41\x88\xd2\x0a\x7e\xc0\x0c\x1b\x1d\x2e\x02\x89\xed\x23\x9a\xb4\xe9\x90\x25\x36\xd5\xf8\xc2\x2d\x94\x70\x29\xc7\xf0\xe7\x91\x18\x2a\x44\x0e\xf8\xd3\x1f\x93\x4d\xb2\xc9\xe1\xe4\xfb\xd7\xc8\x5a\xf4\xab\x4e\x3a\x87\xa6\x98\x70\xbb\x0a\x07\x74\x22\x08\x1d\x8c\xb4\x94\xab\xa9\xac\x05\x7c\xb9\x95\x7d\xcf\xb5\xc1\xd0\xb5\x1d\x9b\xeb\xfc\x56\xf2\x83\x5d\xe4\xe3\x4d\xe4\x6f\xb3\xdf\xff\x53\x27\xf9\xf1\x0e\x71\x0f\xc3\x4b\x7d\xe2\x1e\x36\x8f\x70\x8b\xc4\xe9\x62\xcf\x70\x7a\xbd\x6e\xf1\xec\xe4\xb9\x47\x3e\xf1\x8d\xe1\xeb\xb1\x4f\xc7\xc7\x2f\xce\xb0\x5f\x83\x90\xe1\x3d\x66\xfa\x5f\x0c\xf2\x23\x78\xad\xbe\xd7\x75\x7d\xfa\xd2\x86\x19\x55\x85\xae\xeb\x25\xcc\x6f\x32\xbb\x81\x51\x4e\x7f\x91\x14\xf6\xd9\xee\x31\x51\x67\xf3\x50\xa4\x7b\x66\xb2\x41\x63\xf9\x1d\xfc\x29\xb5\x47\xc2\x89\xf6\x36\xdf\x52\x30\x27\x2f\x8c\xcc\xf7\xde\x28\x9f\xd2\x5d\x5a\xf9\xf0\x34\x7d\x18\xca\xce\x1a\x5d\x2c\x3d\x0d\x3c\xb9\x49\xa6\x9b\xee\x51\x5f\xdc\xfd\x7d\xc3\x70\x21\xec\x32\x3e\x15\x94\x35\x08\x95\x5b\x93\x94\x22\x52\xef\xef\x0a\xf4\x31\xa5\x84\x69\xdc\xef\xdf\xca\x33\x6e\x10\x7a\x61\xec\xf8\xd2\x80\xd2\x92\xc1\x7f\x7b\xb4\x14\x8b\x91\xdd\xde\x43\x04\x9a\x31\x7d\x86\xe1\x5d\xa1\xeb\xc2\xd0\x06\x32\xaf\x7f\xf0\x6c\x9b\xdb\x9f\xe9\x09\x29\xef\x4f\xb4\x1e\xd3\x0d\x75\x1d\xde\x52\xa8\x6a\xfc\xfb\x10\x8b\xc5\x2e\x5c\x34\xcb\x7e\x02\x4d\xda\xb2\x0f\x30\x08\x34\x23\x2c\xb7\x9f\xee\x32\x56\x1b\x94\x1f\x5b\xa0\x03\xbb\xff\x0b\x00\x00\xff\xff\xf8\x51\x4b\xf8\x39\x37\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 14137, mode: os.FileMode(420), modTime: time.Unix(1478399231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
